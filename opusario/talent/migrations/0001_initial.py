# Generated by Django 2.1.1 on 2019-01-19 20:32

from django.db import migrations, models
import django.db.models.deletion
import talent.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of city.', max_length=50, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of company.', max_length=255)),
                ('size', models.IntegerField(blank=True, help_text='Number of employees.', null=True)),
                ('company_website', models.URLField(blank=True, help_text='Company website; e.g. https://www.opusario.com', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(help_text='City where company is located.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='talent.City')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of country.', max_length=50, unique=True)),
                ('abbreviation', models.CharField(blank=True, help_text='Optional internet country code assignment.', max_length=4, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='FunctionalArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for functional area, e.g. Technology, Marketing, Product Management, Executive Management.', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='General description of this functional area.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Industry name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='General description of this industry.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Industries',
            },
        ),
        migrations.CreateModel(
            name='MyExperience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, help_text='Details regarding your functional role, if different from general description.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('involvement_level', models.ForeignKey(help_text='Your type of time commitment to this project.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.InvolvementLevel')),
            ],
        ),
        migrations.CreateModel(
            name='MyExternalAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='URL for the account.')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['url'],
            },
        ),
        migrations.CreateModel(
            name='Myself',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Your first name.', max_length=20)),
                ('last_name', models.CharField(help_text='Your last name.', max_length=40)),
                ('nick_name', models.CharField(blank=True, help_text='Optionally, your nickname.', max_length=60, null=True)),
                ('slug', models.SlugField(blank=True, help_text='Subscriber relative URL on Opusario.', null=True)),
                ('photo', models.ImageField(blank=True, help_text='A nice photo of yourself; not an avatar. Although optional, you will get better results when you have one.', null=True, upload_to=talent.models.user_directory_path)),
                ('phone_number', models.IntegerField(help_text='Contact phone number.')),
                ('email_address', models.EmailField(help_text='Contact email address.', max_length=254)),
                ('passion', models.TextField(help_text='Describe what you are good at; what you are passionate about.')),
                ('personality', models.TextField(blank=True, help_text='A very brief statement about what makes you, YOU.', null=True)),
                ('goals', models.TextField(blank=True, help_text='A very brief description that describes your ambitions and goals.', null=True)),
                ('looking', models.BooleanField(default=False, help_text='Ready for new opportunities.')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('city', models.ForeignKey(help_text='The city where you are located.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='talent.City')),
                ('work_location', models.ForeignKey(help_text='Preferred location to do your work.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.WorkLocation')),
                ('work_relationship', models.ForeignKey(help_text='Preferred relationship with organizations you work for.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.WorkRelationship')),
                ('work_schedule', models.ForeignKey(help_text='Preferred type of work schedule.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.WorkSchedule')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='MySkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('degree_of_use', models.ForeignKey(help_text='Degree to which you used this skill.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.DegreeOfUse')),
            ],
        ),
        migrations.CreateModel(
            name='MyTool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('degree_of_use', models.ForeignKey(help_text='Degree to which you used this tool.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.DegreeOfUse')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Title by which you refer to the project.', max_length=255)),
                ('project_objective', models.TextField(blank=True, help_text='Optional description of the problem solved or anticipated benefits of the project.', null=True)),
                ('start_year', models.IntegerField(help_text='Year this project started.')),
                ('duration', models.IntegerField(help_text='Length of project in weeks.')),
                ('team_size', models.IntegerField(help_text='Number of people that directly contributed to the project.')),
                ('code_repository', models.URLField(blank=True, help_text='Code repository for project, if publicly available.', null=True)),
                ('project_site', models.URLField(blank=True, help_text='Project site, or portion of company website impacted by project, if publicly available.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(help_text='Company associated with the project.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='talent.Company')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectOutcome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('non_quantified_outcomes', models.TextField(blank=True, help_text='Use quantified outcomes if possible, otherwise, note positive outcomes here.', null=True)),
                ('metric_amount', models.IntegerField(blank=True, help_text='Specify the amount of increase or decrease as a positive or negative integer number.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('metric_subject', models.ForeignKey(blank=True, help_text='Specify what increased or decreased.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.MetricSubject')),
                ('metric_type', models.ForeignKey(blank=True, help_text='Specify how the outcome was measured.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.MetricType')),
                ('project', models.ForeignKey(help_text='Associated project.', on_delete=django.db.models.deletion.CASCADE, to='talent.Project')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of role, e.g. Software Engineer, Product Manager, Copy Writer, Customer Service Associate.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='General description of this role.', null=True)),
                ('management', models.BooleanField(help_text='Has oversight of fellow team members.')),
                ('leadership', models.BooleanField(help_text='Has executive leadership.')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('functional_area', models.ForeignKey(help_text='Functional area this role is associated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='talent.FunctionalArea')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of skill. E.g. Python, Javascript, SEO, Requirements Analysis.', max_length=100)),
                ('version', models.CharField(blank=True, help_text='Version, if applicable. E.g. Python 3.4.', max_length=25, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name', 'version'],
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of state.', max_length=50, unique=True)),
                ('abbreviation', models.CharField(blank=True, help_text='For United States, two character abbreviation for state.', max_length=2, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('country', models.ForeignKey(help_text='Country where state is located.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='talent.Country')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of tool. E.g. PyCharm, GIMP, Adobe Premiere Pro, MS Office.', max_length=100)),
                ('version', models.CharField(blank=True, help_text='Version, if applicable. E.g. V19.1.6, or Community versus Professional.', max_length=25, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='tool',
            unique_together={('name', 'version')},
        ),
        migrations.AlterUniqueTogether(
            name='skill',
            unique_together={('name', 'version')},
        ),
        migrations.AddField(
            model_name='mytool',
            name='tool',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='talent.Tool'),
        ),
        migrations.AddField(
            model_name='myskill',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='talent.Skill'),
        ),
        migrations.AddField(
            model_name='myexternalaccount',
            name='myself',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='talent.Myself'),
        ),
        migrations.AddField(
            model_name='myexternalaccount',
            name='type',
            field=models.ForeignKey(help_text='Type of external account.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.ExternalAccountType'),
        ),
        migrations.AddField(
            model_name='myexperience',
            name='myself',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='talent.Myself'),
        ),
        migrations.AddField(
            model_name='myexperience',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='talent.Project'),
        ),
        migrations.AddField(
            model_name='myexperience',
            name='role',
            field=models.ForeignKey(help_text='Your primary functional role on the project.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='talent.Role'),
        ),
        migrations.AddField(
            model_name='myexperience',
            name='skills',
            field=models.ManyToManyField(help_text='Skills used to complete this project.', to='talent.MySkill'),
        ),
        migrations.AddField(
            model_name='myexperience',
            name='tools',
            field=models.ManyToManyField(help_text='Tools used to complete this project.', to='talent.MyTool'),
        ),
        migrations.AddField(
            model_name='myexperience',
            name='work_relationship',
            field=models.ForeignKey(help_text='Your employment relationship to this project.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.WorkRelationship'),
        ),
        migrations.AddField(
            model_name='company',
            name='industry',
            field=models.ForeignKey(help_text='Primary source of revenue.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='talent.Industry'),
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(help_text='State where city is located.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='talent.State'),
        ),
        migrations.AlterUniqueTogether(
            name='company',
            unique_together={('name', 'city')},
        ),
    ]
