# Generated by Django 2.1.1 on 2018-09-20 22:00

import backend.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of city.', max_length=50, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of company.', max_length=255)),
                ('company_website', models.URLField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(help_text='City where company is located.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.City')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of country.', max_length=50, unique=True)),
                ('abbreviation', models.CharField(blank=True, help_text='Optional internet country code assignment.', max_length=4, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExternalAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(help_text='Type or name of the external account, such as Github, Instagram, Facebook, etc.', max_length=100, unique=True)),
                ('base_url', models.URLField(help_text='Base URL for account. E.g. https://linkedin.com.', unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['type_name'],
            },
        ),
        migrations.CreateModel(
            name='FunctionalArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for functional area, e.g. Technology, Marketing, Product Management, Executive Management.', max_length=100)),
                ('description', models.TextField(blank=True, help_text='General description of this functional area.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Industry name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='General description of this industry.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MyExperience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MyExternalAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_url', models.URLField(help_text='URL for your account.')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('at_account_type', models.ForeignKey(help_text='Account type or name such as Github, Instagram, Facebook, etc.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.ExternalAccount')),
            ],
            options={
                'ordering': ['account_url'],
            },
        ),
        migrations.CreateModel(
            name='Myself',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Your first name.', max_length=20)),
                ('last_name', models.CharField(help_text='Your last name.', max_length=60)),
                ('nick_name', models.CharField(blank=True, help_text='Optionally, your nickname.', max_length=60, null=True)),
                ('photo', models.ImageField(blank=True, help_text='A nice photo of yourself; not an avatar. Although optional, you will get better results when you have one.', null=True, upload_to=backend.models.user_directory_path)),
                ('phone_number', models.IntegerField(help_text='Contact phone number.')),
                ('email_address', models.EmailField(help_text='Contact email address.', max_length=254)),
                ('brief', models.TextField(help_text='Describe what you are good at; what you are passionate about.')),
                ('work_relationship', models.CharField(choices=[('empl', 'Employee'), ('agcy', 'Agency'), ('cons', 'Consultant'), ('free', 'Freelance contractor')], help_text='Preferred relationship with organizations you work for.', max_length=4)),
                ('work_schedule', models.CharField(choices=[('full', 'Full-time'), ('part', 'Part-time'), ('shared', 'Shared job')], help_text='Preferred type of work schedule.', max_length=6)),
                ('work_location', models.CharField(choices=[('office', '100% on site'), ('mixed', 'Mixed on site and remote'), ('remote', '100% remote')], help_text='Preferred location to do your work.', max_length=6)),
                ('who_am_i', models.TextField(blank=True, help_text='A very brief statement about what makes you, YOU.', null=True)),
                ('where_headed', models.TextField(blank=True, help_text='A very brief description that describes your ambitions and goals.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('at_city', models.ForeignKey(help_text='The city where you are located.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.City')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Title by which you refer to the project.', max_length=255)),
                ('project_objective', models.TextField(blank=True, help_text='Optional description of the problem solved or anticipated benefits of the project.', null=True)),
                ('start_year', models.IntegerField(help_text='Year this project started.')),
                ('duration', models.IntegerField(help_text='Length of project in weeks.')),
                ('team_size', models.IntegerField(help_text='Number of people that directly contributed to the project.')),
                ('code_repository', models.URLField(blank=True, help_text='Code repository for project, if publicly available.', null=True)),
                ('project_site', models.URLField(blank=True, help_text='Project site, or portion of company website impacted by project, if publicly available.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('at_company', models.ForeignKey(help_text='Company associated with the project.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.Company')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectOutcome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('non_quantified_outcomes', models.TextField(blank=True, help_text='Use quantified outcomes if possible, otherwise, note positive outcomes here.', null=True)),
                ('metric_type', models.CharField(blank=True, choices=[('m', 'As a monetary value'), ('p', 'As a percentage')], help_text='Specify how the outcome was measured.', max_length=1, null=True)),
                ('metric_amount', models.IntegerField(blank=True, help_text='Specify the amount of increase or decrease as a positive or negative integer number.', null=True)),
                ('metric_subject', models.CharField(blank=True, choices=[('rev', 'Revenue'), ('exp', 'Expense'), ('acq', 'Customer acquisition'), ('ret', 'Customer retention'), ('val', 'Customer lifetime value'), ('cgs', 'Cost of goods sold')], help_text='Specify what increased or decreased.', max_length=3, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('at_project', models.ForeignKey(help_text='Associated project.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.Project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, help_text='Details regarding your functional role, if different from general description.', null=True)),
                ('involvement_level', models.CharField(choices=[('core', 'Core project team member'), ('need', 'On an as needed basis'), ('sme', 'Provided guidance as subject matter expert')], help_text='Your type of time commitment to this project.', max_length=4)),
                ('employment_relationship', models.CharField(choices=[('empl', 'Employee'), ('agcy', 'Agency'), ('cons', 'Consultant'), ('free', 'Freelance contractor')], help_text='Your employment relationship to this project.', max_length=4)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('at_project', models.ForeignKey(help_text='Associated project.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.Project')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of role, e.g. Software Engineer, Product Manager, Copy Writer, Customer Service Associate.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='General description of this role.', null=True)),
                ('management', models.BooleanField(help_text='Has oversight of fellow team members.')),
                ('leadership', models.BooleanField(help_text='Has executive leadership.')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('at_functional_area', models.ForeignKey(help_text='Functional area this role is associated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.FunctionalArea')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RoleSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('degree_of_use', models.CharField(choices=[('daily', 'Used daily to complete the project'), ('occasional', 'Used periodically to complete the project')], help_text='Degree to which you used this skill.', max_length=10)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('at_project_role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.ProjectRole')),
            ],
        ),
        migrations.CreateModel(
            name='RoleTool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('degree_of_use', models.CharField(choices=[('daily', 'Used daily to complete the project'), ('occasional', 'Used periodically to complete the project')], help_text='Degree to which you used this tool.', max_length=10)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('at_project_role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.ProjectRole')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of skill. E.g. Python, Javascript, SEO, Requirements Analysis.', max_length=100)),
                ('version', models.CharField(blank=True, help_text='Version, if applicable. E.g. Python 3.4.', max_length=25, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('at_functional_area', models.ManyToManyField(help_text='Functional area this skill is associated with.', to='backend.FunctionalArea')),
                ('at_role', models.ManyToManyField(help_text='Role this skill is associated with.', to='backend.Role')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of state.', max_length=50, unique=True)),
                ('abbreviation', models.CharField(blank=True, help_text='For United States, two character abbreviation for state.', max_length=2, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of tool. E.g. PyCharm, GIMP, Adobe Premiere Pro, MS Office.', max_length=100)),
                ('version', models.CharField(blank=True, help_text='Version, if applicable. E.g. V19.1.6, or Community versus Professional.', max_length=25, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('at_functional_area', models.ManyToManyField(help_text='Functional area this tool is associated with.', to='backend.FunctionalArea')),
                ('at_role', models.ManyToManyField(help_text='Role this tool is associated with.', to='backend.Role')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='roletool',
            name='at_tool',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Tool'),
        ),
        migrations.AddField(
            model_name='roleskill',
            name='at_skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Skill'),
        ),
        migrations.AddField(
            model_name='projectrole',
            name='at_role',
            field=models.ManyToManyField(help_text='Your functional role on the project.', to='backend.Role'),
        ),
        migrations.AddField(
            model_name='myself',
            name='at_state',
            field=models.ForeignKey(help_text='The state where you are located.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.State'),
        ),
        migrations.AddField(
            model_name='myexternalaccount',
            name='at_myself',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Myself'),
        ),
        migrations.AddField(
            model_name='myexperience',
            name='at_myself',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Myself'),
        ),
        migrations.AddField(
            model_name='myexperience',
            name='at_project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Project'),
        ),
        migrations.AddField(
            model_name='company',
            name='country',
            field=models.ForeignKey(help_text='Country where company is located.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.Country'),
        ),
        migrations.AddField(
            model_name='company',
            name='state',
            field=models.ForeignKey(help_text='State where company is located.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.State'),
        ),
        migrations.AlterUniqueTogether(
            name='company',
            unique_together={('name', 'city', 'state')},
        ),
    ]
